#pragma once

#include <math.h>
#include "Misc/Utils.h"
#include "Graphics/GLCalls.h"
#include "Misc/StreamUtilFunctions.h"

class Region
{
    public:

        enum region_modifier{halfsize, normal)};

    protected:

        double      top_;
        double      left_;
        double      right_;
        double      bottom_;

        double      width_;
        double      height_;

        Vector2D    center_;

        int         id_;

    public:

        Region() : top_(0), bottom_(0), right_(0), left_(0) {}

        Region(double left,
               double top,
               double right,
               double bottom,
               int id = -1) : top_(top), left_(left), right_(right), bottom_(bottom), id_(id)
        {
            center_ = Vector2D((left+right)*0.5, (top+bottom)*0.5);
            width_  = fabs(right_ - left_);
            height_ = fabs(bottom_ - top_);
        }

        virtual ~Region() {}
        virtual inline void Render(bool showId = false) const;
        inline bool Inside(Vector2D pos, region_modifier r) const;
        inline Vector2D GetRandomPosition() const;

        double GetTop() const { return top_; }
        double GetBottom() const { return bottom_; }
        double GetLeft() const { return left_; }
        double GetRight() const { return right_; }
        double GetHeight() const { return fabs(top_ - bottom_); }
        double GetWidth() const { return fabs(right_ - left_); }
        double GetLength() const { return max(GetWidth(), GetHeight()); }
        double Breadth() const { return min(GetWidth(), GetHeight()); }

        Vector2D Center() const { return center_; }
        int GetID() const { return id_ };
};

inline Vector2D Region::GetRandomPosition() const
{
    return Vector2D(RandInRange(left_,right_), RandInRange(top_,bottom_));
}

inline bool Region::Inside(Vector2D pos, region_modifier r)
{
    if(r == normal)
    {
        return ((pos.x_ > left_) && (pos.x_ < right_) && (pos.y_ > top_) && (pos.y_ < bottom_));
    }
    else
    {
        const double marginX = width_ * 0.25;
        const double marginY = height_ * 0.25;

        return ((pos.x_ > (left_+marginX)) && (pos.x_ < (right_-marginX)) &&
                (pos.y_ > (top_+marginY)) && (pos.y_ < (bottom_-marginY)));
    }
}

inline void Region::Render(bool showId )